<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="406.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="389" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="389" > </text>
<g id="frames">
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="158.9" y="245" width="11.5" height="15.0" fill="rgb(250,115,36)" rx="2" ry="2" />
<text  x="161.93" y="255.5" ></text>
</g>
<g >
<title>PageId::PageId (2 samples, 1.94%)</title><rect x="1167.1" y="213" width="22.9" height="15.0" fill="rgb(233,15,3)" rx="2" ry="2" />
<text  x="1170.09" y="223.5" >P..</text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="78.7" y="245" width="11.5" height="15.0" fill="rgb(227,195,34)" rx="2" ry="2" />
<text  x="81.74" y="255.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (2 samples, 1.94%)</title><rect x="502.6" y="133" width="22.9" height="15.0" fill="rgb(243,170,42)" rx="2" ry="2" />
<text  x="505.62" y="143.5" >s..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="262.0" y="261" width="11.5" height="15.0" fill="rgb(250,76,39)" rx="2" ry="2" />
<text  x="265.04" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.97%)</title><rect x="537.0" y="133" width="11.4" height="15.0" fill="rgb(225,59,29)" rx="2" ry="2" />
<text  x="539.99" y="143.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="330.8" y="245" width="11.4" height="15.0" fill="rgb(235,218,46)" rx="2" ry="2" />
<text  x="333.78" y="255.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (2 samples, 1.94%)</title><rect x="502.6" y="149" width="22.9" height="15.0" fill="rgb(216,92,50)" rx="2" ry="2" />
<text  x="505.62" y="159.5" >P..</text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="376.6" y="229" width="11.5" height="15.0" fill="rgb(206,200,9)" rx="2" ry="2" />
<text  x="379.60" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e3470, (1 samples, 0.97%)</title><rect x="445.3" y="277" width="11.5" height="15.0" fill="rgb(220,213,43)" rx="2" ry="2" />
<text  x="448.34" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="307.9" y="245" width="11.4" height="15.0" fill="rgb(239,23,51)" rx="2" ry="2" />
<text  x="310.86" y="255.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 0.97%)</title><rect x="571.4" y="245" width="11.4" height="15.0" fill="rgb(215,27,2)" rx="2" ry="2" />
<text  x="574.36" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="10.0" y="261" width="11.5" height="15.0" fill="rgb(250,206,26)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99cf670, (1 samples, 0.97%)</title><rect x="113.1" y="277" width="11.5" height="15.0" fill="rgb(224,23,35)" rx="2" ry="2" />
<text  x="116.11" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="365.1" y="261" width="11.5" height="15.0" fill="rgb(231,94,26)" rx="2" ry="2" />
<text  x="368.15" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="90.2" y="229" width="11.5" height="15.0" fill="rgb(215,100,11)" rx="2" ry="2" />
<text  x="93.19" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d0c90, (1 samples, 0.97%)</title><rect x="136.0" y="277" width="11.5" height="15.0" fill="rgb(223,35,36)" rx="2" ry="2" />
<text  x="139.02" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;PageId&gt; (1 samples, 0.97%)</title><rect x="571.4" y="277" width="11.4" height="15.0" fill="rgb(209,78,32)" rx="2" ry="2" />
<text  x="574.36" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="21.5" y="229" width="11.4" height="15.0" fill="rgb(211,137,35)" rx="2" ry="2" />
<text  x="24.46" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="67.3" y="261" width="11.4" height="15.0" fill="rgb(223,160,7)" rx="2" ry="2" />
<text  x="70.28" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d4d10, (1 samples, 0.97%)</title><rect x="204.8" y="277" width="11.4" height="15.0" fill="rgb(219,77,13)" rx="2" ry="2" />
<text  x="207.76" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.97%)</title><rect x="571.4" y="197" width="11.4" height="15.0" fill="rgb(244,170,41)" rx="2" ry="2" />
<text  x="574.36" y="207.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="250.6" y="261" width="11.4" height="15.0" fill="rgb(214,188,12)" rx="2" ry="2" />
<text  x="253.58" y="271.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="353.7" y="245" width="11.4" height="15.0" fill="rgb(221,102,47)" rx="2" ry="2" />
<text  x="356.69" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 0.97%)</title><rect x="514.1" y="101" width="11.4" height="15.0" fill="rgb(208,72,30)" rx="2" ry="2" />
<text  x="517.08" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 2.91%)</title><rect x="525.5" y="181" width="34.4" height="15.0" fill="rgb(234,97,31)" rx="2" ry="2" />
<text  x="528.53" y="191.5" >st..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="10.0" y="229" width="11.5" height="15.0" fill="rgb(205,52,50)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="433.9" y="261" width="11.4" height="15.0" fill="rgb(216,68,3)" rx="2" ry="2" />
<text  x="436.88" y="271.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 0.97%)</title><rect x="479.7" y="53" width="11.5" height="15.0" fill="rgb(224,12,37)" rx="2" ry="2" />
<text  x="482.71" y="63.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (2 samples, 1.94%)</title><rect x="502.6" y="165" width="22.9" height="15.0" fill="rgb(230,200,42)" rx="2" ry="2" />
<text  x="505.62" y="175.5" >s..</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99dd170, (1 samples, 0.97%)</title><rect x="342.2" y="277" width="11.5" height="15.0" fill="rgb(251,57,9)" rx="2" ry="2" />
<text  x="345.23" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Great (1 samples, 0.97%)</title><rect x="376.6" y="261" width="11.5" height="15.0" fill="rgb(230,124,39)" rx="2" ry="2" />
<text  x="379.60" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="193.3" y="245" width="11.5" height="15.0" fill="rgb(222,219,50)" rx="2" ry="2" />
<text  x="196.30" y="255.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (7 samples, 6.80%)</title><rect x="479.7" y="293" width="80.2" height="15.0" fill="rgb(206,107,47)" rx="2" ry="2" />
<text  x="482.71" y="303.5" >std::thre..</text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 0.97%)</title><rect x="548.4" y="133" width="11.5" height="15.0" fill="rgb(230,5,31)" rx="2" ry="2" />
<text  x="551.45" y="143.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="273.5" y="245" width="11.5" height="15.0" fill="rgb(250,133,11)" rx="2" ry="2" />
<text  x="276.50" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="55.8" y="245" width="11.5" height="15.0" fill="rgb(229,51,47)" rx="2" ry="2" />
<text  x="58.83" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.97%)</title><rect x="571.4" y="229" width="11.4" height="15.0" fill="rgb(224,184,12)" rx="2" ry="2" />
<text  x="574.36" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e1f70, (1 samples, 0.97%)</title><rect x="422.4" y="277" width="11.5" height="15.0" fill="rgb(247,164,2)" rx="2" ry="2" />
<text  x="425.43" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="204.8" y="229" width="11.4" height="15.0" fill="rgb(211,196,8)" rx="2" ry="2" />
<text  x="207.76" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e4b50, (1 samples, 0.97%)</title><rect x="468.3" y="277" width="11.4" height="15.0" fill="rgb(253,142,14)" rx="2" ry="2" />
<text  x="471.25" y="287.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.97%)</title><rect x="479.7" y="85" width="11.5" height="15.0" fill="rgb(220,89,45)" rx="2" ry="2" />
<text  x="482.71" y="95.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="67.3" y="229" width="11.4" height="15.0" fill="rgb(237,131,24)" rx="2" ry="2" />
<text  x="70.28" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="227.7" y="245" width="11.4" height="15.0" fill="rgb(251,2,13)" rx="2" ry="2" />
<text  x="230.67" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d77d0, (1 samples, 0.97%)</title><rect x="250.6" y="277" width="11.4" height="15.0" fill="rgb(230,191,28)" rx="2" ry="2" />
<text  x="253.58" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="262.0" y="245" width="11.5" height="15.0" fill="rgb(250,145,24)" rx="2" ry="2" />
<text  x="265.04" y="255.5" ></text>
</g>
<g >
<title>Page::addLink (1 samples, 0.97%)</title><rect x="571.4" y="309" width="11.4" height="15.0" fill="rgb(223,65,3)" rx="2" ry="2" />
<text  x="574.36" y="319.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d37b0, (1 samples, 0.97%)</title><rect x="181.8" y="277" width="11.5" height="15.0" fill="rgb(249,212,41)" rx="2" ry="2" />
<text  x="184.84" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.97%)</title><rect x="479.7" y="117" width="11.5" height="15.0" fill="rgb(221,11,9)" rx="2" ry="2" />
<text  x="482.71" y="127.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="388.1" y="261" width="11.4" height="15.0" fill="rgb(222,211,30)" rx="2" ry="2" />
<text  x="391.06" y="271.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="376.6" y="245" width="11.5" height="15.0" fill="rgb(206,90,27)" rx="2" ry="2" />
<text  x="379.60" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;MultiThreadedPageRankComputer::ThreadRAII, (41 samples, 39.81%)</title><rect x="697.4" y="277" width="469.7" height="15.0" fill="rgb(228,27,26)" rx="2" ry="2" />
<text  x="700.38" y="287.5" >std::vector&lt;MultiThreadedPageRankComputer::ThreadRAII,</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.94%)</title><rect x="525.5" y="149" width="22.9" height="15.0" fill="rgb(244,50,30)" rx="2" ry="2" />
<text  x="528.53" y="159.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="365.1" y="229" width="11.5" height="15.0" fill="rgb(208,71,14)" rx="2" ry="2" />
<text  x="368.15" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="113.1" y="245" width="11.5" height="15.0" fill="rgb(212,33,19)" rx="2" ry="2" />
<text  x="116.11" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.97%)</title><rect x="479.7" y="149" width="11.5" height="15.0" fill="rgb(237,44,47)" rx="2" ry="2" />
<text  x="482.71" y="159.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="44.4" y="245" width="11.4" height="15.0" fill="rgb(252,228,11)" rx="2" ry="2" />
<text  x="47.37" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="170.4" y="229" width="11.4" height="15.0" fill="rgb(220,77,40)" rx="2" ry="2" />
<text  x="173.39" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Adorable (1 samples, 0.97%)</title><rect x="353.7" y="261" width="11.4" height="15.0" fill="rgb(225,127,20)" rx="2" ry="2" />
<text  x="356.69" y="271.5" ></text>
</g>
<g >
<title>std::thread::join()() (41 samples, 39.81%)</title><rect x="697.4" y="181" width="469.7" height="15.0" fill="rgb(212,131,46)" rx="2" ry="2" />
<text  x="700.38" y="191.5" >std::thread::join()()</text>
</g>
<g >
<title>std::vector&lt;PageId, (1 samples, 0.97%)</title><rect x="571.4" y="293" width="11.4" height="15.0" fill="rgb(248,171,8)" rx="2" ry="2" />
<text  x="574.36" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 0.97%)</title><rect x="571.4" y="213" width="11.4" height="15.0" fill="rgb(206,23,44)" rx="2" ry="2" />
<text  x="574.36" y="223.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="124.6" y="229" width="11.4" height="15.0" fill="rgb(208,46,24)" rx="2" ry="2" />
<text  x="127.56" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="113.1" y="261" width="11.5" height="15.0" fill="rgb(219,142,44)" rx="2" ry="2" />
<text  x="116.11" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d0210, (1 samples, 0.97%)</title><rect x="124.6" y="277" width="11.4" height="15.0" fill="rgb(210,229,32)" rx="2" ry="2" />
<text  x="127.56" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="342.2" y="229" width="11.5" height="15.0" fill="rgb(237,114,10)" rx="2" ry="2" />
<text  x="345.23" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99cb650, (1 samples, 0.97%)</title><rect x="44.4" y="277" width="11.4" height="15.0" fill="rgb(236,25,42)" rx="2" ry="2" />
<text  x="47.37" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="136.0" y="245" width="11.5" height="15.0" fill="rgb(225,153,46)" rx="2" ry="2" />
<text  x="139.02" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="342.2" y="261" width="11.5" height="15.0" fill="rgb(245,99,18)" rx="2" ry="2" />
<text  x="345.23" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="399.5" y="245" width="11.5" height="15.0" fill="rgb(249,221,22)" rx="2" ry="2" />
<text  x="402.51" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="468.3" y="245" width="11.4" height="15.0" fill="rgb(244,216,18)" rx="2" ry="2" />
<text  x="471.25" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="319.3" y="245" width="11.5" height="15.0" fill="rgb(220,210,53)" rx="2" ry="2" />
<text  x="322.32" y="255.5" ></text>
</g>
<g >
<title>_IO_getc (1 samples, 0.97%)</title><rect x="605.7" y="261" width="11.5" height="15.0" fill="rgb(214,166,53)" rx="2" ry="2" />
<text  x="608.73" y="271.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (7 samples, 6.80%)</title><rect x="479.7" y="277" width="80.2" height="15.0" fill="rgb(243,171,45)" rx="2" ry="2" />
<text  x="482.71" y="287.5" >std::thre..</text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 1.94%)</title><rect x="1167.1" y="277" width="22.9" height="15.0" fill="rgb(243,210,4)" rx="2" ry="2" />
<text  x="1170.09" y="287.5" >s..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::ThreadRAII::~ThreadRAII(this=0x5570db9c1680, (41 samples, 39.81%)</title><rect x="697.4" y="197" width="469.7" height="15.0" fill="rgb(216,210,13)" rx="2" ry="2" />
<text  x="700.38" y="207.5" >MultiThreadedPageRankComputer::ThreadRAII::~ThreadRAII(this=0x55..</text>
</g>
<g >
<title>std::__detail::_Equal_helper&lt;PageId, (1 samples, 0.97%)</title><rect x="537.0" y="117" width="11.4" height="15.0" fill="rgb(211,90,24)" rx="2" ry="2" />
<text  x="539.99" y="127.5" ></text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex(threadid=140659261163264, (41 samples, 39.81%)</title><rect x="697.4" y="165" width="469.7" height="15.0" fill="rgb(235,11,14)" rx="2" ry="2" />
<text  x="700.38" y="175.5" >__GI___pthread_timedjoin_ex(threadid=140659261163264,</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (1 samples, 0.97%)</title><rect x="525.5" y="133" width="11.5" height="15.0" fill="rgb(235,42,4)" rx="2" ry="2" />
<text  x="528.53" y="143.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (4 samples, 3.88%)</title><rect x="479.7" y="197" width="45.8" height="15.0" fill="rgb(243,151,18)" rx="2" ry="2" />
<text  x="482.71" y="207.5" >std:..</text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::CyclicBarrier::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;,MultiThreadedPageRankComputer::CyclicBarrier::wait()::{lambda()#1}) (7 samples, 6.80%)</title><rect x="617.2" y="277" width="80.2" height="15.0" fill="rgb(214,80,2)" rx="2" ry="2" />
<text  x="620.18" y="287.5" >std::cond..</text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="411.0" y="229" width="11.4" height="15.0" fill="rgb(209,126,11)" rx="2" ry="2" />
<text  x="413.97" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99df570, (1 samples, 0.97%)</title><rect x="376.6" y="277" width="11.5" height="15.0" fill="rgb(215,105,30)" rx="2" ry="2" />
<text  x="379.60" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="433.9" y="245" width="11.4" height="15.0" fill="rgb(216,55,39)" rx="2" ry="2" />
<text  x="436.88" y="255.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="78.7" y="229" width="11.5" height="15.0" fill="rgb(222,159,39)" rx="2" ry="2" />
<text  x="81.74" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="250.6" y="245" width="11.4" height="15.0" fill="rgb(233,163,52)" rx="2" ry="2" />
<text  x="253.58" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99ce1d0, (1 samples, 0.97%)</title><rect x="90.2" y="277" width="11.5" height="15.0" fill="rgb(213,70,48)" rx="2" ry="2" />
<text  x="93.19" y="287.5" ></text>
</g>
<g >
<title>clone() (48 samples, 46.60%)</title><rect x="10.0" y="341" width="549.9" height="15.0" fill="rgb(219,186,24)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >clone()</text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.97%)</title><rect x="537.0" y="37" width="11.4" height="15.0" fill="rgb(248,81,13)" rx="2" ry="2" />
<text  x="539.99" y="47.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e0b30, (1 samples, 0.97%)</title><rect x="399.5" y="277" width="11.5" height="15.0" fill="rgb(248,131,47)" rx="2" ry="2" />
<text  x="402.51" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99de850, (1 samples, 0.97%)</title><rect x="365.1" y="277" width="11.5" height="15.0" fill="rgb(247,119,11)" rx="2" ry="2" />
<text  x="368.15" y="287.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*, (41 samples, 39.81%)</title><rect x="697.4" y="261" width="469.7" height="15.0" fill="rgb(208,10,24)" rx="2" ry="2" />
<text  x="700.38" y="271.5" >std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*,</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (50 samples, 48.54%)</title><rect x="617.2" y="309" width="572.8" height="15.0" fill="rgb(210,150,13)" rx="2" ry="2" />
<text  x="620.18" y="319.5" >MultiThreadedPageRankComputer::computeForNetwork</text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="411.0" y="245" width="11.4" height="15.0" fill="rgb(240,69,39)" rx="2" ry="2" />
<text  x="413.97" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Large (1 samples, 0.97%)</title><rect x="239.1" y="261" width="11.5" height="15.0" fill="rgb(245,91,48)" rx="2" ry="2" />
<text  x="242.13" y="271.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;PageId,std::atomic&lt;double&gt;, (3 samples, 2.91%)</title><rect x="525.5" y="197" width="34.4" height="15.0" fill="rgb(231,116,7)" rx="2" ry="2" />
<text  x="528.53" y="207.5" >st..</text>
</g>
<g >
<title>all (103 samples, 100%)</title><rect x="10.0" y="357" width="1180.0" height="15.0" fill="rgb(221,93,52)" rx="2" ry="2" />
<text  x="13.00" y="367.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="32.9" y="245" width="11.5" height="15.0" fill="rgb(239,101,14)" rx="2" ry="2" />
<text  x="35.91" y="255.5" ></text>
</g>
<g >
<title>PageId::operator== (1 samples, 0.97%)</title><rect x="537.0" y="85" width="11.4" height="15.0" fill="rgb(209,69,12)" rx="2" ry="2" />
<text  x="539.99" y="95.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Dirty (1 samples, 0.97%)</title><rect x="411.0" y="261" width="11.4" height="15.0" fill="rgb(238,199,25)" rx="2" ry="2" />
<text  x="413.97" y="271.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (7 samples, 6.80%)</title><rect x="617.2" y="213" width="80.2" height="15.0" fill="rgb(237,179,32)" rx="2" ry="2" />
<text  x="620.18" y="223.5" >futex_wai..</text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 0.97%)</title><rect x="548.4" y="117" width="11.5" height="15.0" fill="rgb(252,67,19)" rx="2" ry="2" />
<text  x="551.45" y="127.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="136.0" y="261" width="11.5" height="15.0" fill="rgb(227,165,3)" rx="2" ry="2" />
<text  x="139.02" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.97%)</title><rect x="537.0" y="69" width="11.4" height="15.0" fill="rgb(233,3,40)" rx="2" ry="2" />
<text  x="539.99" y="79.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*&gt; (41 samples, 39.81%)</title><rect x="697.4" y="229" width="469.7" height="15.0" fill="rgb(239,39,4)" rx="2" ry="2" />
<text  x="700.38" y="239.5" >std::_Destroy_aux&lt;false&gt;::__destroy&lt;MultiThreadedPageRankCompute..</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99c9730, (1 samples, 0.97%)</title><rect x="10.0" y="277" width="11.5" height="15.0" fill="rgb(205,126,46)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Huge (1 samples, 0.97%)</title><rect x="456.8" y="261" width="11.5" height="15.0" fill="rgb(218,178,0)" rx="2" ry="2" />
<text  x="459.80" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;PageId&gt;::construct&lt;PageId, (1 samples, 0.97%)</title><rect x="571.4" y="261" width="11.4" height="15.0" fill="rgb(252,187,19)" rx="2" ry="2" />
<text  x="574.36" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="445.3" y="229" width="11.5" height="15.0" fill="rgb(215,92,42)" rx="2" ry="2" />
<text  x="448.34" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="422.4" y="229" width="11.5" height="15.0" fill="rgb(209,122,44)" rx="2" ry="2" />
<text  x="425.43" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e15b0, (1 samples, 0.97%)</title><rect x="411.0" y="277" width="11.4" height="15.0" fill="rgb(220,152,15)" rx="2" ry="2" />
<text  x="413.97" y="287.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 1.94%)</title><rect x="1167.1" y="261" width="22.9" height="15.0" fill="rgb(251,175,37)" rx="2" ry="2" />
<text  x="1170.09" y="271.5" >s..</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99ccd30, (1 samples, 0.97%)</title><rect x="67.3" y="277" width="11.4" height="15.0" fill="rgb(209,188,5)" rx="2" ry="2" />
<text  x="70.28" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator() (1 samples, 0.97%)</title><rect x="525.5" y="101" width="11.5" height="15.0" fill="rgb(222,200,37)" rx="2" ry="2" />
<text  x="528.53" y="111.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="456.8" y="245" width="11.5" height="15.0" fill="rgb(209,218,28)" rx="2" ry="2" />
<text  x="459.80" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 0.97%)</title><rect x="514.1" y="117" width="11.4" height="15.0" fill="rgb(230,50,48)" rx="2" ry="2" />
<text  x="517.08" y="127.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="307.9" y="261" width="11.4" height="15.0" fill="rgb(227,155,52)" rx="2" ry="2" />
<text  x="310.86" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*&gt; (41 samples, 39.81%)</title><rect x="697.4" y="245" width="469.7" height="15.0" fill="rgb(214,163,51)" rx="2" ry="2" />
<text  x="700.38" y="255.5" >std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*&gt;</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e00b0, (1 samples, 0.97%)</title><rect x="388.1" y="277" width="11.4" height="15.0" fill="rgb(217,38,43)" rx="2" ry="2" />
<text  x="391.06" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="388.1" y="229" width="11.4" height="15.0" fill="rgb(213,5,38)" rx="2" ry="2" />
<text  x="391.06" y="239.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="296.4" y="229" width="11.5" height="15.0" fill="rgb(232,95,29)" rx="2" ry="2" />
<text  x="299.41" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="170.4" y="261" width="11.4" height="15.0" fill="rgb(224,17,14)" rx="2" ry="2" />
<text  x="173.39" y="271.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="101.7" y="245" width="11.4" height="15.0" fill="rgb(242,125,40)" rx="2" ry="2" />
<text  x="104.65" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (1 samples, 0.97%)</title><rect x="491.2" y="149" width="11.4" height="15.0" fill="rgb(223,211,7)" rx="2" ry="2" />
<text  x="494.17" y="159.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d58b0, (1 samples, 0.97%)</title><rect x="216.2" y="277" width="11.5" height="15.0" fill="rgb(228,219,19)" rx="2" ry="2" />
<text  x="219.21" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99ca150, (1 samples, 0.97%)</title><rect x="21.5" y="277" width="11.4" height="15.0" fill="rgb(224,160,47)" rx="2" ry="2" />
<text  x="24.46" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (2 samples, 1.94%)</title><rect x="1167.1" y="181" width="22.9" height="15.0" fill="rgb(223,104,2)" rx="2" ry="2" />
<text  x="1170.09" y="191.5" >s..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="273.5" y="261" width="11.5" height="15.0" fill="rgb(253,148,10)" rx="2" ry="2" />
<text  x="276.50" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Odd (1 samples, 0.97%)</title><rect x="468.3" y="261" width="11.4" height="15.0" fill="rgb(211,226,14)" rx="2" ry="2" />
<text  x="471.25" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII&gt; (41 samples, 39.81%)</title><rect x="697.4" y="213" width="469.7" height="15.0" fill="rgb(207,27,37)" rx="2" ry="2" />
<text  x="700.38" y="223.5" >std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII&gt;</text>
</g>
<g >
<title>__malloc_fork_unlock_parent() (1 samples, 0.97%)</title><rect x="285.0" y="229" width="11.4" height="15.0" fill="rgb(213,152,33)" rx="2" ry="2" />
<text  x="287.95" y="239.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (2 samples, 1.94%)</title><rect x="1167.1" y="197" width="22.9" height="15.0" fill="rgb(215,140,25)" rx="2" ry="2" />
<text  x="1170.09" y="207.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="330.8" y="229" width="11.4" height="15.0" fill="rgb(244,119,23)" rx="2" ry="2" />
<text  x="333.78" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="307.9" y="229" width="11.4" height="15.0" fill="rgb(243,168,22)" rx="2" ry="2" />
<text  x="310.86" y="239.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.97%)</title><rect x="537.0" y="101" width="11.4" height="15.0" fill="rgb(235,116,41)" rx="2" ry="2" />
<text  x="539.99" y="111.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="158.9" y="229" width="11.5" height="15.0" fill="rgb(223,89,9)" rx="2" ry="2" />
<text  x="161.93" y="239.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="468.3" y="229" width="11.4" height="15.0" fill="rgb(247,149,31)" rx="2" ry="2" />
<text  x="471.25" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Old (1 samples, 0.97%)</title><rect x="101.7" y="261" width="11.4" height="15.0" fill="rgb(208,196,12)" rx="2" ry="2" />
<text  x="104.65" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d2d30, (1 samples, 0.97%)</title><rect x="170.4" y="277" width="11.4" height="15.0" fill="rgb(213,151,44)" rx="2" ry="2" />
<text  x="173.39" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="55.8" y="261" width="11.5" height="15.0" fill="rgb(216,106,1)" rx="2" ry="2" />
<text  x="58.83" y="271.5" ></text>
</g>
<g >
<title>__memcmp_avx2_movbe (1 samples, 0.97%)</title><rect x="479.7" y="37" width="11.5" height="15.0" fill="rgb(242,118,50)" rx="2" ry="2" />
<text  x="482.71" y="47.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="21.5" y="245" width="11.4" height="15.0" fill="rgb(237,88,18)" rx="2" ry="2" />
<text  x="24.46" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="399.5" y="261" width="11.5" height="15.0" fill="rgb(226,145,17)" rx="2" ry="2" />
<text  x="402.51" y="271.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="353.7" y="229" width="11.4" height="15.0" fill="rgb(236,35,0)" rx="2" ry="2" />
<text  x="356.69" y="239.5" ></text>
</g>
<g >
<title>std::getline&lt;char,std::char_traits&lt;char&gt;, (3 samples, 2.91%)</title><rect x="582.8" y="309" width="34.4" height="15.0" fill="rgb(253,93,33)" rx="2" ry="2" />
<text  x="585.82" y="319.5" >st..</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99cd750, (1 samples, 0.97%)</title><rect x="78.7" y="277" width="11.5" height="15.0" fill="rgb(245,94,39)" rx="2" ry="2" />
<text  x="81.74" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="90.2" y="245" width="11.5" height="15.0" fill="rgb(228,112,23)" rx="2" ry="2" />
<text  x="93.19" y="255.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash (1 samples, 0.97%)</title><rect x="502.6" y="117" width="11.5" height="15.0" fill="rgb(223,167,39)" rx="2" ry="2" />
<text  x="505.62" y="127.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d9870, (1 samples, 0.97%)</title><rect x="285.0" y="277" width="11.4" height="15.0" fill="rgb(240,57,40)" rx="2" ry="2" />
<text  x="287.95" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d8d30, (1 samples, 0.97%)</title><rect x="273.5" y="277" width="11.5" height="15.0" fill="rgb(233,143,17)" rx="2" ry="2" />
<text  x="276.50" y="287.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char,std::char_traits&lt;char&gt; (3 samples, 2.91%)</title><rect x="582.8" y="293" width="34.4" height="15.0" fill="rgb(225,224,7)" rx="2" ry="2" />
<text  x="585.82" y="303.5" >st..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::pageRankWorkFunc (7 samples, 6.80%)</title><rect x="479.7" y="213" width="80.2" height="15.0" fill="rgb(228,17,26)" rx="2" ry="2" />
<text  x="482.71" y="223.5" >MultiThre..</text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="101.7" y="229" width="11.4" height="15.0" fill="rgb(223,46,11)" rx="2" ry="2" />
<text  x="104.65" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d8250, (1 samples, 0.97%)</title><rect x="262.0" y="277" width="11.5" height="15.0" fill="rgb(238,135,0)" rx="2" ry="2" />
<text  x="265.04" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99ddcb0, (1 samples, 0.97%)</title><rect x="353.7" y="277" width="11.4" height="15.0" fill="rgb(228,78,52)" rx="2" ry="2" />
<text  x="356.69" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="10.0" y="245" width="11.5" height="15.0" fill="rgb(224,134,30)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d63f0, (1 samples, 0.97%)</title><rect x="227.7" y="277" width="11.4" height="15.0" fill="rgb(244,82,50)" rx="2" ry="2" />
<text  x="230.67" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Odd (1 samples, 0.97%)</title><rect x="296.4" y="261" width="11.5" height="15.0" fill="rgb(212,87,46)" rx="2" ry="2" />
<text  x="299.41" y="271.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (7 samples, 6.80%)</title><rect x="617.2" y="245" width="80.2" height="15.0" fill="rgb(232,133,0)" rx="2" ry="2" />
<text  x="620.18" y="255.5" >__pthread..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.97%)</title><rect x="548.4" y="165" width="11.5" height="15.0" fill="rgb(206,212,32)" rx="2" ry="2" />
<text  x="551.45" y="175.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="445.3" y="261" width="11.5" height="15.0" fill="rgb(225,101,8)" rx="2" ry="2" />
<text  x="448.34" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="55.8" y="229" width="11.5" height="15.0" fill="rgb(227,200,10)" rx="2" ry="2" />
<text  x="58.83" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="273.5" y="229" width="11.5" height="15.0" fill="rgb(212,95,4)" rx="2" ry="2" />
<text  x="276.50" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;PageId, (1 samples, 0.97%)</title><rect x="479.7" y="133" width="11.5" height="15.0" fill="rgb(208,184,1)" rx="2" ry="2" />
<text  x="482.71" y="143.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="181.8" y="229" width="11.5" height="15.0" fill="rgb(250,51,0)" rx="2" ry="2" />
<text  x="184.84" y="239.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (7 samples, 6.80%)</title><rect x="479.7" y="245" width="80.2" height="15.0" fill="rgb(225,177,31)" rx="2" ry="2" />
<text  x="482.71" y="255.5" >std::__in..</text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (7 samples, 6.80%)</title><rect x="479.7" y="261" width="80.2" height="15.0" fill="rgb(245,41,44)" rx="2" ry="2" />
<text  x="482.71" y="271.5" >std::thre..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="193.3" y="229" width="11.5" height="15.0" fill="rgb(206,155,53)" rx="2" ry="2" />
<text  x="196.30" y="239.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::compare(__n=&lt;optimized (1 samples, 0.97%)</title><rect x="537.0" y="53" width="11.4" height="15.0" fill="rgb(249,156,36)" rx="2" ry="2" />
<text  x="539.99" y="63.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="67.3" y="245" width="11.4" height="15.0" fill="rgb(240,92,13)" rx="2" ry="2" />
<text  x="70.28" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99da410, (1 samples, 0.97%)</title><rect x="296.4" y="277" width="11.5" height="15.0" fill="rgb(239,30,23)" rx="2" ry="2" />
<text  x="299.41" y="287.5" ></text>
</g>
<g >
<title>std::_Construct&lt;PageId, (2 samples, 1.94%)</title><rect x="1167.1" y="229" width="22.9" height="15.0" fill="rgb(216,193,2)" rx="2" ry="2" />
<text  x="1170.09" y="239.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="204.8" y="245" width="11.4" height="15.0" fill="rgb(251,116,39)" rx="2" ry="2" />
<text  x="207.76" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="204.8" y="261" width="11.4" height="15.0" fill="rgb(236,51,50)" rx="2" ry="2" />
<text  x="207.76" y="271.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (7 samples, 6.80%)</title><rect x="617.2" y="229" width="80.2" height="15.0" fill="rgb(208,138,4)" rx="2" ry="2" />
<text  x="620.18" y="239.5" >__pthread..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::CyclicBarrier::wait (7 samples, 6.80%)</title><rect x="617.2" y="293" width="80.2" height="15.0" fill="rgb(219,33,19)" rx="2" ry="2" />
<text  x="620.18" y="303.5" >MultiThre..</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99db970, (1 samples, 0.97%)</title><rect x="319.3" y="277" width="11.5" height="15.0" fill="rgb(227,36,44)" rx="2" ry="2" />
<text  x="322.32" y="287.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="181.8" y="245" width="11.5" height="15.0" fill="rgb(226,191,3)" rx="2" ry="2" />
<text  x="184.84" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="227.7" y="261" width="11.4" height="15.0" fill="rgb(243,10,4)" rx="2" ry="2" />
<text  x="230.67" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 0.97%)</title><rect x="548.4" y="101" width="11.5" height="15.0" fill="rgb(221,12,30)" rx="2" ry="2" />
<text  x="551.45" y="111.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="262.0" y="229" width="11.5" height="15.0" fill="rgb(221,67,15)" rx="2" ry="2" />
<text  x="265.04" y="239.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="239.1" y="229" width="11.5" height="15.0" fill="rgb(210,196,22)" rx="2" ry="2" />
<text  x="242.13" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="227.7" y="229" width="11.4" height="15.0" fill="rgb(243,226,8)" rx="2" ry="2" />
<text  x="230.67" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e3f50, (1 samples, 0.97%)</title><rect x="456.8" y="277" width="11.5" height="15.0" fill="rgb(239,205,5)" rx="2" ry="2" />
<text  x="459.80" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="158.9" y="261" width="11.5" height="15.0" fill="rgb(205,201,42)" rx="2" ry="2" />
<text  x="161.93" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="113.1" y="229" width="11.5" height="15.0" fill="rgb(245,178,46)" rx="2" ry="2" />
<text  x="116.11" y="239.5" ></text>
</g>
<g >
<title>std::vector&lt;PageId, (2 samples, 1.94%)</title><rect x="1167.1" y="293" width="22.9" height="15.0" fill="rgb(250,40,0)" rx="2" ry="2" />
<text  x="1170.09" y="303.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="365.1" y="245" width="11.5" height="15.0" fill="rgb(241,116,47)" rx="2" ry="2" />
<text  x="368.15" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="44.4" y="261" width="11.4" height="15.0" fill="rgb(206,23,29)" rx="2" ry="2" />
<text  x="47.37" y="271.5" ></text>
</g>
<g >
<title>pageRankComputationWithNetwork(computer=..., (50 samples, 48.54%)</title><rect x="617.2" y="325" width="572.8" height="15.0" fill="rgb(217,130,22)" rx="2" ry="2" />
<text  x="620.18" y="335.5" >pageRankComputationWithNetwork(computer=...,</text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="296.4" y="245" width="11.5" height="15.0" fill="rgb(245,188,48)" rx="2" ry="2" />
<text  x="299.41" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Old (1 samples, 0.97%)</title><rect x="78.7" y="261" width="11.5" height="15.0" fill="rgb(229,14,1)" rx="2" ry="2" />
<text  x="81.74" y="271.5" ></text>
</g>
<g >
<title>std::operator==&lt;char&gt; (1 samples, 0.97%)</title><rect x="479.7" y="69" width="11.5" height="15.0" fill="rgb(244,46,40)" rx="2" ry="2" />
<text  x="482.71" y="79.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d1830, (1 samples, 0.97%)</title><rect x="147.5" y="277" width="11.4" height="15.0" fill="rgb(249,103,26)" rx="2" ry="2" />
<text  x="150.48" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Huge (1 samples, 0.97%)</title><rect x="319.3" y="261" width="11.5" height="15.0" fill="rgb(239,62,44)" rx="2" ry="2" />
<text  x="322.32" y="271.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;__gnu_cxx::__normal_iterator&lt;PageId (2 samples, 1.94%)</title><rect x="1167.1" y="245" width="22.9" height="15.0" fill="rgb(252,125,53)" rx="2" ry="2" />
<text  x="1170.09" y="255.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="170.4" y="245" width="11.4" height="15.0" fill="rgb(217,13,5)" rx="2" ry="2" />
<text  x="173.39" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="44.4" y="229" width="11.4" height="15.0" fill="rgb(231,167,27)" rx="2" ry="2" />
<text  x="47.37" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="136.0" y="229" width="11.5" height="15.0" fill="rgb(233,38,19)" rx="2" ry="2" />
<text  x="139.02" y="239.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="456.8" y="229" width="11.5" height="15.0" fill="rgb(213,13,37)" rx="2" ry="2" />
<text  x="459.80" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Big (1 samples, 0.97%)</title><rect x="216.2" y="261" width="11.5" height="15.0" fill="rgb(240,144,42)" rx="2" ry="2" />
<text  x="219.21" y="271.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="147.5" y="245" width="11.4" height="15.0" fill="rgb(219,28,16)" rx="2" ry="2" />
<text  x="150.48" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="342.2" y="245" width="11.5" height="15.0" fill="rgb(205,222,25)" rx="2" ry="2" />
<text  x="345.23" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="330.8" y="261" width="11.4" height="15.0" fill="rgb(222,194,40)" rx="2" ry="2" />
<text  x="333.78" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Old (1 samples, 0.97%)</title><rect x="181.8" y="261" width="11.5" height="15.0" fill="rgb(235,191,30)" rx="2" ry="2" />
<text  x="184.84" y="271.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char,std::char_traits&lt;char&gt; (1 samples, 0.97%)</title><rect x="559.9" y="309" width="11.5" height="15.0" fill="rgb(211,141,44)" rx="2" ry="2" />
<text  x="562.90" y="319.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="319.3" y="229" width="11.5" height="15.0" fill="rgb(236,191,47)" rx="2" ry="2" />
<text  x="322.32" y="239.5" ></text>
</g>
<g >
<title>main(argc=&lt;optimized (55 samples, 53.40%)</title><rect x="559.9" y="341" width="630.1" height="15.0" fill="rgb(215,220,10)" rx="2" ry="2" />
<text  x="562.90" y="351.5" >main(argc=&lt;optimized</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;New (1 samples, 0.97%)</title><rect x="147.5" y="261" width="11.4" height="15.0" fill="rgb(217,195,0)" rx="2" ry="2" />
<text  x="150.48" y="271.5" ></text>
</g>
<g >
<title>__GI__IO_sputbackc (1 samples, 0.97%)</title><rect x="582.8" y="277" width="11.5" height="15.0" fill="rgb(211,194,14)" rx="2" ry="2" />
<text  x="585.82" y="287.5" ></text>
</g>
<g >
<title>std::equal_to&lt;PageId&gt;::operator() (1 samples, 0.97%)</title><rect x="479.7" y="101" width="11.5" height="15.0" fill="rgb(240,143,14)" rx="2" ry="2" />
<text  x="482.71" y="111.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="147.5" y="229" width="11.4" height="15.0" fill="rgb(212,199,37)" rx="2" ry="2" />
<text  x="150.48" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="32.9" y="261" width="11.5" height="15.0" fill="rgb(251,77,9)" rx="2" ry="2" />
<text  x="35.91" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="399.5" y="229" width="11.5" height="15.0" fill="rgb(240,57,11)" rx="2" ry="2" />
<text  x="402.51" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="433.9" y="229" width="11.4" height="15.0" fill="rgb(239,198,13)" rx="2" ry="2" />
<text  x="436.88" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d2250, (1 samples, 0.97%)</title><rect x="158.9" y="277" width="11.5" height="15.0" fill="rgb(246,128,20)" rx="2" ry="2" />
<text  x="161.93" y="287.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void,void (7 samples, 6.80%)</title><rect x="479.7" y="229" width="80.2" height="15.0" fill="rgb(235,109,23)" rx="2" ry="2" />
<text  x="482.71" y="239.5" >std::__in..</text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99dc750, (1 samples, 0.97%)</title><rect x="330.8" y="277" width="11.4" height="15.0" fill="rgb(224,92,41)" rx="2" ry="2" />
<text  x="333.78" y="287.5" ></text>
</g>
<g >
<title>??() (48 samples, 46.60%)</title><rect x="10.0" y="309" width="549.9" height="15.0" fill="rgb(226,188,33)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >??()</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::gen_id_thread(frst_free=..., (41 samples, 39.81%)</title><rect x="10.0" y="293" width="469.7" height="15.0" fill="rgb(237,20,2)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >MultiThreadedPageRankComputer::gen_id_thread(frst_free=...,</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="422.4" y="261" width="11.5" height="15.0" fill="rgb(222,224,34)" rx="2" ry="2" />
<text  x="425.43" y="271.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 0.97%)</title><rect x="216.2" y="229" width="11.5" height="15.0" fill="rgb(206,224,10)" rx="2" ry="2" />
<text  x="219.21" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d42f0, (1 samples, 0.97%)</title><rect x="193.3" y="277" width="11.5" height="15.0" fill="rgb(220,223,31)" rx="2" ry="2" />
<text  x="196.30" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99cec50, (1 samples, 0.97%)</title><rect x="101.7" y="277" width="11.4" height="15.0" fill="rgb(227,140,17)" rx="2" ry="2" />
<text  x="104.65" y="287.5" ></text>
</g>
<g >
<title>operatornew(unsigned (1 samples, 0.97%)</title><rect x="571.4" y="165" width="11.4" height="15.0" fill="rgb(227,170,53)" rx="2" ry="2" />
<text  x="574.36" y="175.5" ></text>
</g>
<g >
<title>start_thread(arg=&lt;optimized (48 samples, 46.60%)</title><rect x="10.0" y="325" width="549.9" height="15.0" fill="rgb(247,69,52)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >start_thread(arg=&lt;optimized</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="250.6" y="229" width="11.4" height="15.0" fill="rgb(229,80,9)" rx="2" ry="2" />
<text  x="253.58" y="239.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99d6db0, (1 samples, 0.97%)</title><rect x="239.1" y="277" width="11.5" height="15.0" fill="rgb(215,55,10)" rx="2" ry="2" />
<text  x="242.13" y="287.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize(this=this@entry=0x7ffdeb5d5c00, (1 samples, 0.97%)</title><rect x="559.9" y="325" width="11.5" height="15.0" fill="rgb(229,8,29)" rx="2" ry="2" />
<text  x="562.90" y="335.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Young (1 samples, 0.97%)</title><rect x="124.6" y="261" width="11.4" height="15.0" fill="rgb(233,130,4)" rx="2" ry="2" />
<text  x="127.56" y="271.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (4 samples, 3.88%)</title><rect x="571.4" y="325" width="45.8" height="15.0" fill="rgb(209,4,38)" rx="2" ry="2" />
<text  x="574.36" y="335.5" >Stdi..</text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="124.6" y="245" width="11.4" height="15.0" fill="rgb(252,101,28)" rx="2" ry="2" />
<text  x="127.56" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99cabd0, (1 samples, 0.97%)</title><rect x="32.9" y="277" width="11.5" height="15.0" fill="rgb(210,16,8)" rx="2" ry="2" />
<text  x="35.91" y="287.5" ></text>
</g>
<g >
<title>__libc_fork() (1 samples, 0.97%)</title><rect x="285.0" y="245" width="11.4" height="15.0" fill="rgb(231,72,24)" rx="2" ry="2" />
<text  x="287.95" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="32.9" y="229" width="11.5" height="15.0" fill="rgb(214,179,10)" rx="2" ry="2" />
<text  x="35.91" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="21.5" y="261" width="11.4" height="15.0" fill="rgb(220,159,7)" rx="2" ry="2" />
<text  x="24.46" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.94%)</title><rect x="525.5" y="165" width="22.9" height="15.0" fill="rgb(238,5,49)" rx="2" ry="2" />
<text  x="528.53" y="175.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="445.3" y="245" width="11.5" height="15.0" fill="rgb(233,145,23)" rx="2" ry="2" />
<text  x="448.34" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="422.4" y="245" width="11.5" height="15.0" fill="rgb(215,200,11)" rx="2" ry="2" />
<text  x="425.43" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="216.2" y="245" width="11.5" height="15.0" fill="rgb(210,144,31)" rx="2" ry="2" />
<text  x="219.21" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99dae30, (1 samples, 0.97%)</title><rect x="307.9" y="277" width="11.4" height="15.0" fill="rgb(239,200,32)" rx="2" ry="2" />
<text  x="310.86" y="287.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::generateIds (41 samples, 39.81%)</title><rect x="697.4" y="293" width="469.7" height="15.0" fill="rgb(251,44,32)" rx="2" ry="2" />
<text  x="700.38" y="303.5" >MultiThreadedPageRankComputer::generateIds</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (4 samples, 3.88%)</title><rect x="479.7" y="181" width="45.8" height="15.0" fill="rgb(240,66,4)" rx="2" ry="2" />
<text  x="482.71" y="191.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 0.97%)</title><rect x="525.5" y="117" width="11.5" height="15.0" fill="rgb(254,229,3)" rx="2" ry="2" />
<text  x="528.53" y="127.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="193.3" y="261" width="11.5" height="15.0" fill="rgb(214,7,37)" rx="2" ry="2" />
<text  x="196.30" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Odd (1 samples, 0.97%)</title><rect x="285.0" y="261" width="11.4" height="15.0" fill="rgb(247,176,5)" rx="2" ry="2" />
<text  x="287.95" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99cc250, (1 samples, 0.97%)</title><rect x="55.8" y="277" width="11.5" height="15.0" fill="rgb(252,96,18)" rx="2" ry="2" />
<text  x="58.83" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 1.94%)</title><rect x="479.7" y="165" width="22.9" height="15.0" fill="rgb(249,133,54)" rx="2" ry="2" />
<text  x="482.71" y="175.5" >s..</text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 0.97%)</title><rect x="548.4" y="149" width="11.5" height="15.0" fill="rgb(242,184,23)" rx="2" ry="2" />
<text  x="551.45" y="159.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 0.97%)</title><rect x="388.1" y="245" width="11.4" height="15.0" fill="rgb(234,224,8)" rx="2" ry="2" />
<text  x="391.06" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7fedc99e29f0, (1 samples, 0.97%)</title><rect x="433.9" y="277" width="11.4" height="15.0" fill="rgb(225,158,6)" rx="2" ry="2" />
<text  x="436.88" y="287.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;)() (7 samples, 6.80%)</title><rect x="617.2" y="261" width="80.2" height="15.0" fill="rgb(214,1,40)" rx="2" ry="2" />
<text  x="620.18" y="271.5" >std::cond..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 0.97%)</title><rect x="90.2" y="261" width="11.5" height="15.0" fill="rgb(241,211,7)" rx="2" ry="2" />
<text  x="93.19" y="271.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 0.97%)</title><rect x="239.1" y="245" width="11.5" height="15.0" fill="rgb(224,221,44)" rx="2" ry="2" />
<text  x="242.13" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char,std::char_traits&lt;char&gt; (2 samples, 1.94%)</title><rect x="594.3" y="277" width="22.9" height="15.0" fill="rgb(244,149,25)" rx="2" ry="2" />
<text  x="597.27" y="287.5" >_..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 0.97%)</title><rect x="571.4" y="181" width="11.4" height="15.0" fill="rgb(206,34,41)" rx="2" ry="2" />
<text  x="574.36" y="191.5" ></text>
</g>
</g>
</svg>
