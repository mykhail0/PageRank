<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>Page::generateId(this=0x7f6dda034ab0, (1 samples, 1.18%)</title><rect x="37.8" y="293" width="13.8" height="15.0" fill="rgb(210,7,25)" rx="2" ry="2" />
<text  x="40.76" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="204.4" y="245" width="13.8" height="15.0" fill="rgb(233,69,53)" rx="2" ry="2" />
<text  x="207.35" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="162.7" y="261" width="13.9" height="15.0" fill="rgb(210,105,3)" rx="2" ry="2" />
<text  x="165.71" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda043b10, (1 samples, 1.18%)</title><rect x="384.8" y="293" width="13.9" height="15.0" fill="rgb(250,54,44)" rx="2" ry="2" />
<text  x="387.82" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="149" width="13.8" height="15.0" fill="rgb(254,84,46)" rx="2" ry="2" />
<text  x="1151.35" y="159.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;PageId,PageId&gt;, (1 samples, 1.18%)</title><rect x="1176.1" y="293" width="13.9" height="15.0" fill="rgb(240,24,30)" rx="2" ry="2" />
<text  x="1179.12" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda040e10, (1 samples, 1.18%)</title><rect x="329.3" y="293" width="13.9" height="15.0" fill="rgb(224,132,0)" rx="2" ry="2" />
<text  x="332.29" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03e4d0, (1 samples, 1.18%)</title><rect x="259.9" y="293" width="13.9" height="15.0" fill="rgb(232,158,10)" rx="2" ry="2" />
<text  x="262.88" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0421f0, (1 samples, 1.18%)</title><rect x="357.1" y="293" width="13.8" height="15.0" fill="rgb(220,9,36)" rx="2" ry="2" />
<text  x="360.06" y="303.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::CyclicBarrier::wait (2 samples, 2.35%)</title><rect x="801.3" y="309" width="27.8" height="15.0" fill="rgb(245,22,35)" rx="2" ry="2" />
<text  x="804.29" y="319.5" >M..</text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="218.2" y="245" width="13.9" height="15.0" fill="rgb(227,17,50)" rx="2" ry="2" />
<text  x="221.24" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="509.8" y="261" width="13.8" height="15.0" fill="rgb(251,221,19)" rx="2" ry="2" />
<text  x="512.76" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::gen_id_thread(frst_free=..., (46 samples, 54.12%)</title><rect x="10.0" y="309" width="638.6" height="15.0" fill="rgb(247,123,53)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >MultiThreadedPageRankComputer::gen_id_thread(frst_free=...,</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="121.1" y="245" width="13.8" height="15.0" fill="rgb(221,6,50)" rx="2" ry="2" />
<text  x="124.06" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04ec70, (1 samples, 1.18%)</title><rect x="634.7" y="293" width="13.9" height="15.0" fill="rgb(244,132,27)" rx="2" ry="2" />
<text  x="637.71" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="357.1" y="261" width="13.8" height="15.0" fill="rgb(216,68,37)" rx="2" ry="2" />
<text  x="360.06" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda036e50, (1 samples, 1.18%)</title><rect x="107.2" y="293" width="13.9" height="15.0" fill="rgb(246,174,50)" rx="2" ry="2" />
<text  x="110.18" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03f9d0, (1 samples, 1.18%)</title><rect x="287.6" y="293" width="13.9" height="15.0" fill="rgb(210,229,4)" rx="2" ry="2" />
<text  x="290.65" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="309" width="13.9" height="15.0" fill="rgb(222,79,14)" rx="2" ry="2" />
<text  x="1179.12" y="319.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="495.9" y="261" width="13.9" height="15.0" fill="rgb(231,139,39)" rx="2" ry="2" />
<text  x="498.88" y="271.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (2 samples, 2.35%)</title><rect x="662.5" y="133" width="27.7" height="15.0" fill="rgb(214,186,3)" rx="2" ry="2" />
<text  x="665.47" y="143.5" >f..</text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda045130, (1 samples, 1.18%)</title><rect x="412.6" y="293" width="13.9" height="15.0" fill="rgb(207,135,5)" rx="2" ry="2" />
<text  x="415.59" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="426.5" y="261" width="13.9" height="15.0" fill="rgb(215,21,24)" rx="2" ry="2" />
<text  x="429.47" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="37.8" y="277" width="13.8" height="15.0" fill="rgb(208,119,41)" rx="2" ry="2" />
<text  x="40.76" y="287.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::CyclicBarrier::wait()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;,MultiThreadedPageRankComputer::CyclicBarrier::wait()::{lambda()#1}) (2 samples, 2.35%)</title><rect x="801.3" y="293" width="27.8" height="15.0" fill="rgb(244,205,42)" rx="2" ry="2" />
<text  x="804.29" y="303.5" >s..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Stupid (1 samples, 1.18%)</title><rect x="51.6" y="277" width="13.9" height="15.0" fill="rgb(216,218,20)" rx="2" ry="2" />
<text  x="54.65" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda049c90, (1 samples, 1.18%)</title><rect x="509.8" y="293" width="13.8" height="15.0" fill="rgb(231,68,1)" rx="2" ry="2" />
<text  x="512.76" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="261" width="13.8" height="15.0" fill="rgb(206,120,38)" rx="2" ry="2" />
<text  x="748.76" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="190.5" y="245" width="13.9" height="15.0" fill="rgb(250,78,6)" rx="2" ry="2" />
<text  x="193.47" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="634.7" y="261" width="13.9" height="15.0" fill="rgb(239,15,43)" rx="2" ry="2" />
<text  x="637.71" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="565.3" y="261" width="13.9" height="15.0" fill="rgb(217,26,10)" rx="2" ry="2" />
<text  x="568.29" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda039250, (1 samples, 1.18%)</title><rect x="148.8" y="293" width="13.9" height="15.0" fill="rgb(229,138,43)" rx="2" ry="2" />
<text  x="151.82" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03e530, (1 samples, 1.18%)</title><rect x="273.8" y="293" width="13.8" height="15.0" fill="rgb(217,25,41)" rx="2" ry="2" />
<text  x="276.76" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="412.6" y="245" width="13.9" height="15.0" fill="rgb(217,71,23)" rx="2" ry="2" />
<text  x="415.59" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.35%)</title><rect x="690.2" y="181" width="27.8" height="15.0" fill="rgb(234,79,51)" rx="2" ry="2" />
<text  x="693.24" y="191.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="197" width="13.8" height="15.0" fill="rgb(223,210,15)" rx="2" ry="2" />
<text  x="748.76" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1162.2" y="133" width="13.9" height="15.0" fill="rgb(230,197,44)" rx="2" ry="2" />
<text  x="1165.24" y="143.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03ba10, (1 samples, 1.18%)</title><rect x="204.4" y="293" width="13.8" height="15.0" fill="rgb(223,174,39)" rx="2" ry="2" />
<text  x="207.35" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1162.2" y="165" width="13.9" height="15.0" fill="rgb(248,64,27)" rx="2" ry="2" />
<text  x="1165.24" y="175.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda046510, (1 samples, 1.18%)</title><rect x="440.4" y="293" width="13.8" height="15.0" fill="rgb(249,87,35)" rx="2" ry="2" />
<text  x="443.35" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04c3f0, (1 samples, 1.18%)</title><rect x="565.3" y="293" width="13.9" height="15.0" fill="rgb(205,122,28)" rx="2" ry="2" />
<text  x="568.29" y="303.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::ThreadRAII::~ThreadRAII(this=0x55575f1aaec0, (23 samples, 27.06%)</title><rect x="829.1" y="213" width="319.3" height="15.0" fill="rgb(227,138,26)" rx="2" ry="2" />
<text  x="832.06" y="223.5" >MultiThreadedPageRankComputer::ThreadRAII::..</text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03ba70, (1 samples, 1.18%)</title><rect x="218.2" y="293" width="13.9" height="15.0" fill="rgb(224,73,51)" rx="2" ry="2" />
<text  x="221.24" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;MultiThreadedPageRankComputer::ThreadRAII, (23 samples, 27.06%)</title><rect x="829.1" y="293" width="319.3" height="15.0" fill="rgb(211,76,20)" rx="2" ry="2" />
<text  x="832.06" y="303.5" >std::vector&lt;MultiThreadedPageRankComputer::..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="537.5" y="229" width="13.9" height="15.0" fill="rgb(244,71,46)" rx="2" ry="2" />
<text  x="540.53" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="273.8" y="245" width="13.8" height="15.0" fill="rgb(213,92,25)" rx="2" ry="2" />
<text  x="276.76" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda042190, (1 samples, 1.18%)</title><rect x="343.2" y="293" width="13.9" height="15.0" fill="rgb(241,229,3)" rx="2" ry="2" />
<text  x="346.18" y="303.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="301.5" y="245" width="13.9" height="15.0" fill="rgb(243,15,22)" rx="2" ry="2" />
<text  x="304.53" y="255.5" ></text>
</g>
<g >
<title>main(argc=&lt;optimized (33 samples, 38.82%)</title><rect x="731.9" y="357" width="458.1" height="15.0" fill="rgb(210,220,20)" rx="2" ry="2" />
<text  x="734.88" y="367.5" >main(argc=&lt;optimized</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="229" width="13.8" height="15.0" fill="rgb(228,191,42)" rx="2" ry="2" />
<text  x="748.76" y="239.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (2 samples, 2.35%)</title><rect x="801.3" y="245" width="27.8" height="15.0" fill="rgb(207,55,53)" rx="2" ry="2" />
<text  x="804.29" y="255.5" >_..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="482.0" y="277" width="13.9" height="15.0" fill="rgb(209,54,36)" rx="2" ry="2" />
<text  x="485.00" y="287.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="181" width="13.9" height="15.0" fill="rgb(211,166,25)" rx="2" ry="2" />
<text  x="1179.12" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char,std::char_traits&lt;char&gt;, (1 samples, 1.18%)</title><rect x="1176.1" y="133" width="13.9" height="15.0" fill="rgb(225,46,35)" rx="2" ry="2" />
<text  x="1179.12" y="143.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::pageRankWorkFunc(index=0, (1 samples, 1.18%)</title><rect x="648.6" y="229" width="13.9" height="15.0" fill="rgb(246,64,36)" rx="2" ry="2" />
<text  x="651.59" y="239.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*&gt; (23 samples, 27.06%)</title><rect x="829.1" y="261" width="319.3" height="15.0" fill="rgb(253,212,47)" rx="2" ry="2" />
<text  x="832.06" y="271.5" >std::_Destroy&lt;MultiThreadedPageRankComputer..</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="398.7" y="245" width="13.9" height="15.0" fill="rgb(219,74,5)" rx="2" ry="2" />
<text  x="401.71" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="176.6" y="245" width="13.9" height="15.0" fill="rgb(248,19,4)" rx="2" ry="2" />
<text  x="179.59" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Adorable (1 samples, 1.18%)</title><rect x="246.0" y="277" width="13.9" height="15.0" fill="rgb(219,16,54)" rx="2" ry="2" />
<text  x="249.00" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04ec10, (1 samples, 1.18%)</title><rect x="620.8" y="293" width="13.9" height="15.0" fill="rgb(207,24,48)" rx="2" ry="2" />
<text  x="623.82" y="303.5" ></text>
</g>
<g >
<title>__GI___pthread_timedjoin_ex(threadid=140109780510464, (23 samples, 27.06%)</title><rect x="829.1" y="181" width="319.3" height="15.0" fill="rgb(244,211,10)" rx="2" ry="2" />
<text  x="832.06" y="191.5" >__GI___pthread_timedjoin_ex(threadid=140109..</text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03a690, (1 samples, 1.18%)</title><rect x="190.5" y="293" width="13.9" height="15.0" fill="rgb(235,9,48)" rx="2" ry="2" />
<text  x="193.47" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="370.9" y="261" width="13.9" height="15.0" fill="rgb(233,192,2)" rx="2" ry="2" />
<text  x="373.94" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::computeForNetwork (28 samples, 32.94%)</title><rect x="801.3" y="325" width="388.7" height="15.0" fill="rgb(226,180,19)" rx="2" ry="2" />
<text  x="804.29" y="335.5" >MultiThreadedPageRankComputer::computeForNetwork</text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda037ff0, (1 samples, 1.18%)</title><rect x="121.1" y="293" width="13.8" height="15.0" fill="rgb(222,1,4)" rx="2" ry="2" />
<text  x="124.06" y="303.5" ></text>
</g>
<g >
<title>std::getline&lt;char,std::char_traits&lt;char&gt;, (3 samples, 3.53%)</title><rect x="759.6" y="325" width="41.7" height="15.0" fill="rgb(223,28,51)" rx="2" ry="2" />
<text  x="762.65" y="335.5" >std..</text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="246.0" y="261" width="13.9" height="15.0" fill="rgb(217,7,34)" rx="2" ry="2" />
<text  x="249.00" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="287.6" y="261" width="13.9" height="15.0" fill="rgb(214,163,38)" rx="2" ry="2" />
<text  x="290.65" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04d770, (1 samples, 1.18%)</title><rect x="593.1" y="293" width="13.8" height="15.0" fill="rgb(212,0,43)" rx="2" ry="2" />
<text  x="596.06" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03cf10, (1 samples, 1.18%)</title><rect x="232.1" y="293" width="13.9" height="15.0" fill="rgb(225,69,31)" rx="2" ry="2" />
<text  x="235.12" y="303.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="79.4" y="261" width="13.9" height="15.0" fill="rgb(233,45,52)" rx="2" ry="2" />
<text  x="82.41" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (2 samples, 2.35%)</title><rect x="1148.4" y="293" width="27.7" height="15.0" fill="rgb(230,215,10)" rx="2" ry="2" />
<text  x="1151.35" y="303.5" >s..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="287.6" y="277" width="13.9" height="15.0" fill="rgb(207,60,26)" rx="2" ry="2" />
<text  x="290.65" y="287.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char,std::char_traits&lt;char&gt; (1 samples, 1.18%)</title><rect x="731.9" y="325" width="13.9" height="15.0" fill="rgb(224,157,44)" rx="2" ry="2" />
<text  x="734.88" y="335.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="277" width="13.8" height="15.0" fill="rgb(254,6,39)" rx="2" ry="2" />
<text  x="748.76" y="287.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy&lt;false&gt;::__uninit_copy&lt;std::move_iterator&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="213" width="13.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="1179.12" y="223.5" ></text>
</g>
<g >
<title>tcache_put (1 samples, 1.18%)</title><rect x="1162.2" y="69" width="13.9" height="15.0" fill="rgb(243,75,52)" rx="2" ry="2" />
<text  x="1165.24" y="79.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03cf70, (1 samples, 1.18%)</title><rect x="246.0" y="293" width="13.9" height="15.0" fill="rgb(210,147,24)" rx="2" ry="2" />
<text  x="249.00" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="148.8" y="245" width="13.9" height="15.0" fill="rgb(222,113,37)" rx="2" ry="2" />
<text  x="151.82" y="255.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (2 samples, 2.35%)</title><rect x="662.5" y="165" width="27.7" height="15.0" fill="rgb(227,160,21)" rx="2" ry="2" />
<text  x="665.47" y="175.5" >_..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (2 samples, 2.35%)</title><rect x="1148.4" y="309" width="27.7" height="15.0" fill="rgb(243,143,40)" rx="2" ry="2" />
<text  x="1151.35" y="319.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="37.8" y="245" width="13.8" height="15.0" fill="rgb(247,46,49)" rx="2" ry="2" />
<text  x="40.76" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="384.8" y="277" width="13.9" height="15.0" fill="rgb(244,210,15)" rx="2" ry="2" />
<text  x="387.82" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="232.1" y="245" width="13.9" height="15.0" fill="rgb(209,184,11)" rx="2" ry="2" />
<text  x="235.12" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda035d10, (1 samples, 1.18%)</title><rect x="79.4" y="293" width="13.9" height="15.0" fill="rgb(226,167,38)" rx="2" ry="2" />
<text  x="82.41" y="303.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="232.1" y="277" width="13.9" height="15.0" fill="rgb(249,211,17)" rx="2" ry="2" />
<text  x="235.12" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="454.2" y="277" width="13.9" height="15.0" fill="rgb(224,93,38)" rx="2" ry="2" />
<text  x="457.24" y="287.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (6 samples, 7.06%)</title><rect x="648.6" y="277" width="83.3" height="15.0" fill="rgb(232,8,24)" rx="2" ry="2" />
<text  x="651.59" y="287.5" >std::thre..</text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1148.4" y="197" width="13.8" height="15.0" fill="rgb(248,85,11)" rx="2" ry="2" />
<text  x="1151.35" y="207.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="165" width="13.8" height="15.0" fill="rgb(219,162,4)" rx="2" ry="2" />
<text  x="1151.35" y="175.5" ></text>
</g>
<g >
<title>std::uninitialized_copy&lt;std::move_iterator&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="229" width="13.9" height="15.0" fill="rgb(214,52,49)" rx="2" ry="2" />
<text  x="1179.12" y="239.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="246.0" y="245" width="13.9" height="15.0" fill="rgb(210,118,41)" rx="2" ry="2" />
<text  x="249.00" y="255.5" ></text>
</g>
<g >
<title>std::__uninitialized_copy_a&lt;std::move_iterator&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="245" width="13.9" height="15.0" fill="rgb(237,191,6)" rx="2" ry="2" />
<text  x="1179.12" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="565.3" y="277" width="13.9" height="15.0" fill="rgb(213,174,38)" rx="2" ry="2" />
<text  x="568.29" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="537.5" y="213" width="13.9" height="15.0" fill="rgb(212,194,47)" rx="2" ry="2" />
<text  x="540.53" y="223.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="10.0" y="213" width="13.9" height="15.0" fill="rgb(238,74,42)" rx="2" ry="2" />
<text  x="13.00" y="223.5" ></text>
</g>
<g >
<title>std::thread::join()() (23 samples, 27.06%)</title><rect x="829.1" y="197" width="319.3" height="15.0" fill="rgb(244,194,44)" rx="2" ry="2" />
<text  x="832.06" y="207.5" >std::thread::join()()</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Old (1 samples, 1.18%)</title><rect x="579.2" y="277" width="13.9" height="15.0" fill="rgb(238,56,30)" rx="2" ry="2" />
<text  x="582.18" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringbuf&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="309" width="13.8" height="15.0" fill="rgb(248,56,11)" rx="2" ry="2" />
<text  x="748.76" y="319.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="482.0" y="261" width="13.9" height="15.0" fill="rgb(226,216,44)" rx="2" ry="2" />
<text  x="485.00" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="343.2" y="277" width="13.9" height="15.0" fill="rgb(219,199,17)" rx="2" ry="2" />
<text  x="346.18" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="273.8" y="277" width="13.8" height="15.0" fill="rgb(214,31,30)" rx="2" ry="2" />
<text  x="276.76" y="287.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="579.2" y="245" width="13.9" height="15.0" fill="rgb(240,155,18)" rx="2" ry="2" />
<text  x="582.18" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda047710, (1 samples, 1.18%)</title><rect x="468.1" y="293" width="13.9" height="15.0" fill="rgb(218,214,13)" rx="2" ry="2" />
<text  x="471.12" y="303.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="190.5" y="277" width="13.9" height="15.0" fill="rgb(226,111,48)" rx="2" ry="2" />
<text  x="193.47" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="620.8" y="261" width="13.9" height="15.0" fill="rgb(239,227,11)" rx="2" ry="2" />
<text  x="623.82" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="315.4" y="277" width="13.9" height="15.0" fill="rgb(223,216,7)" rx="2" ry="2" />
<text  x="318.41" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="593.1" y="245" width="13.8" height="15.0" fill="rgb(211,24,28)" rx="2" ry="2" />
<text  x="596.06" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="134.9" y="261" width="13.9" height="15.0" fill="rgb(249,191,31)" rx="2" ry="2" />
<text  x="137.94" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="509.8" y="277" width="13.8" height="15.0" fill="rgb(230,200,35)" rx="2" ry="2" />
<text  x="512.76" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="537.5" y="245" width="13.9" height="15.0" fill="rgb(227,153,32)" rx="2" ry="2" />
<text  x="540.53" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Adorable (1 samples, 1.18%)</title><rect x="107.2" y="277" width="13.9" height="15.0" fill="rgb(206,155,52)" rx="2" ry="2" />
<text  x="110.18" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="133" width="13.8" height="15.0" fill="rgb(218,52,22)" rx="2" ry="2" />
<text  x="1151.35" y="143.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="259.9" y="261" width="13.9" height="15.0" fill="rgb(241,40,15)" rx="2" ry="2" />
<text  x="262.88" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="315.4" y="261" width="13.9" height="15.0" fill="rgb(246,149,43)" rx="2" ry="2" />
<text  x="318.41" y="271.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="329.3" y="261" width="13.9" height="15.0" fill="rgb(217,87,27)" rx="2" ry="2" />
<text  x="332.29" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="134.9" y="277" width="13.9" height="15.0" fill="rgb(238,191,0)" rx="2" ry="2" />
<text  x="137.94" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="10.0" y="245" width="13.9" height="15.0" fill="rgb(211,12,39)" rx="2" ry="2" />
<text  x="13.00" y="255.5" ></text>
</g>
<g >
<title>_IO_ungetc (1 samples, 1.18%)</title><rect x="759.6" y="293" width="13.9" height="15.0" fill="rgb(251,157,18)" rx="2" ry="2" />
<text  x="762.65" y="303.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="107.2" y="245" width="13.9" height="15.0" fill="rgb(229,157,13)" rx="2" ry="2" />
<text  x="110.18" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="468.1" y="261" width="13.9" height="15.0" fill="rgb(222,152,3)" rx="2" ry="2" />
<text  x="471.12" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0450d0, (1 samples, 1.18%)</title><rect x="398.7" y="293" width="13.9" height="15.0" fill="rgb(222,16,1)" rx="2" ry="2" />
<text  x="401.71" y="303.5" ></text>
</g>
<g >
<title>PageId::~PageId (1 samples, 1.18%)</title><rect x="1162.2" y="181" width="13.9" height="15.0" fill="rgb(251,197,28)" rx="2" ry="2" />
<text  x="1165.24" y="191.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="440.4" y="245" width="13.8" height="15.0" fill="rgb(246,195,0)" rx="2" ry="2" />
<text  x="443.35" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Adorable (1 samples, 1.18%)</title><rect x="79.4" y="277" width="13.9" height="15.0" fill="rgb(205,119,3)" rx="2" ry="2" />
<text  x="82.41" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="454.2" y="261" width="13.9" height="15.0" fill="rgb(223,24,2)" rx="2" ry="2" />
<text  x="457.24" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1148.4" y="213" width="13.8" height="15.0" fill="rgb(250,208,50)" rx="2" ry="2" />
<text  x="1151.35" y="223.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId (1 samples, 1.18%)</title><rect x="537.5" y="277" width="13.9" height="15.0" fill="rgb(220,1,42)" rx="2" ry="2" />
<text  x="540.53" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="65.5" y="277" width="13.9" height="15.0" fill="rgb(208,111,13)" rx="2" ry="2" />
<text  x="68.53" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda034b10, (1 samples, 1.18%)</title><rect x="51.6" y="293" width="13.9" height="15.0" fill="rgb(228,34,24)" rx="2" ry="2" />
<text  x="54.65" y="303.5" ></text>
</g>
<g >
<title>std::hash&lt;std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="718.0" y="149" width="13.9" height="15.0" fill="rgb(250,178,54)" rx="2" ry="2" />
<text  x="721.00" y="159.5" ></text>
</g>
<g >
<title>_IO_new_file_underflow(fp=0x7f6dd9ce7a00 (1 samples, 1.18%)</title><rect x="787.4" y="261" width="13.9" height="15.0" fill="rgb(242,100,10)" rx="2" ry="2" />
<text  x="790.41" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda049cf0, (1 samples, 1.18%)</title><rect x="523.6" y="293" width="13.9" height="15.0" fill="rgb(224,151,9)" rx="2" ry="2" />
<text  x="526.65" y="303.5" ></text>
</g>
<g >
<title>__pthread_cond_wait_common (2 samples, 2.35%)</title><rect x="662.5" y="149" width="27.7" height="15.0" fill="rgb(209,108,44)" rx="2" ry="2" />
<text  x="665.47" y="159.5" >_..</text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="107.2" y="261" width="13.9" height="15.0" fill="rgb(247,137,14)" rx="2" ry="2" />
<text  x="110.18" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="93.3" y="277" width="13.9" height="15.0" fill="rgb(210,151,44)" rx="2" ry="2" />
<text  x="96.29" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Stupid (1 samples, 1.18%)</title><rect x="162.7" y="277" width="13.9" height="15.0" fill="rgb(242,195,17)" rx="2" ry="2" />
<text  x="165.71" y="287.5" ></text>
</g>
<g >
<title>std::_Hash_bytes(voidconst*, (1 samples, 1.18%)</title><rect x="718.0" y="117" width="13.9" height="15.0" fill="rgb(205,17,11)" rx="2" ry="2" />
<text  x="721.00" y="127.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0338b0, (1 samples, 1.18%)</title><rect x="23.9" y="293" width="13.9" height="15.0" fill="rgb(214,190,54)" rx="2" ry="2" />
<text  x="26.88" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_ReuseOrAllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1162.2" y="245" width="13.9" height="15.0" fill="rgb(223,12,8)" rx="2" ry="2" />
<text  x="1165.24" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="213" width="13.8" height="15.0" fill="rgb(248,136,49)" rx="2" ry="2" />
<text  x="748.76" y="223.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0489d0, (1 samples, 1.18%)</title><rect x="495.9" y="293" width="13.9" height="15.0" fill="rgb(223,180,2)" rx="2" ry="2" />
<text  x="498.88" y="303.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(__n=22945, (1 samples, 1.18%)</title><rect x="745.8" y="181" width="13.8" height="15.0" fill="rgb(229,151,18)" rx="2" ry="2" />
<text  x="748.76" y="191.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="293" width="13.8" height="15.0" fill="rgb(245,51,8)" rx="2" ry="2" />
<text  x="748.76" y="303.5" ></text>
</g>
<g >
<title>std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1162.2" y="197" width="13.9" height="15.0" fill="rgb(207,22,9)" rx="2" ry="2" />
<text  x="1165.24" y="207.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="93.3" y="245" width="13.9" height="15.0" fill="rgb(213,38,2)" rx="2" ry="2" />
<text  x="96.29" y="255.5" ></text>
</g>
<g >
<title>std::__invoke_impl&lt;void,void (6 samples, 7.06%)</title><rect x="648.6" y="245" width="83.3" height="15.0" fill="rgb(231,88,45)" rx="2" ry="2" />
<text  x="651.59" y="255.5" >std::__in..</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="343.2" y="261" width="13.9" height="15.0" fill="rgb(205,113,25)" rx="2" ry="2" />
<text  x="346.18" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId,std::pair&lt;PageId (2 samples, 2.35%)</title><rect x="690.2" y="165" width="27.8" height="15.0" fill="rgb(246,208,45)" rx="2" ry="2" />
<text  x="693.24" y="175.5" >s..</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="65.5" y="261" width="13.9" height="15.0" fill="rgb(227,212,4)" rx="2" ry="2" />
<text  x="68.53" y="271.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 1.18%)</title><rect x="1162.2" y="85" width="13.9" height="15.0" fill="rgb(209,202,50)" rx="2" ry="2" />
<text  x="1165.24" y="95.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04d7d0, (1 samples, 1.18%)</title><rect x="606.9" y="293" width="13.9" height="15.0" fill="rgb(213,31,53)" rx="2" ry="2" />
<text  x="609.94" y="303.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Adorable (1 samples, 1.18%)</title><rect x="329.3" y="277" width="13.9" height="15.0" fill="rgb(225,122,42)" rx="2" ry="2" />
<text  x="332.29" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda035cb0, (1 samples, 1.18%)</title><rect x="65.5" y="293" width="13.9" height="15.0" fill="rgb(225,150,4)" rx="2" ry="2" />
<text  x="68.53" y="303.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="85" width="13.8" height="15.0" fill="rgb(244,124,42)" rx="2" ry="2" />
<text  x="1151.35" y="95.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="10.0" y="229" width="13.9" height="15.0" fill="rgb(215,80,45)" rx="2" ry="2" />
<text  x="13.00" y="239.5" ></text>
</g>
<g >
<title>clone() (52 samples, 61.18%)</title><rect x="10.0" y="357" width="721.9" height="15.0" fill="rgb(208,150,9)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >clone()</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="384.8" y="245" width="13.9" height="15.0" fill="rgb(230,66,31)" rx="2" ry="2" />
<text  x="387.82" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="606.9" y="261" width="13.9" height="15.0" fill="rgb(252,125,23)" rx="2" ry="2" />
<text  x="609.94" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda048970, (1 samples, 1.18%)</title><rect x="482.0" y="293" width="13.9" height="15.0" fill="rgb(236,228,18)" rx="2" ry="2" />
<text  x="485.00" y="303.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="634.7" y="245" width="13.9" height="15.0" fill="rgb(240,78,0)" rx="2" ry="2" />
<text  x="637.71" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04b070, (1 samples, 1.18%)</title><rect x="537.5" y="293" width="13.9" height="15.0" fill="rgb(247,64,33)" rx="2" ry="2" />
<text  x="540.53" y="303.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Big (1 samples, 1.18%)</title><rect x="523.6" y="277" width="13.9" height="15.0" fill="rgb(229,173,6)" rx="2" ry="2" />
<text  x="526.65" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0476b0, (1 samples, 1.18%)</title><rect x="454.2" y="293" width="13.9" height="15.0" fill="rgb(239,96,22)" rx="2" ry="2" />
<text  x="457.24" y="303.5" ></text>
</g>
<g >
<title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;void (6 samples, 7.06%)</title><rect x="648.6" y="309" width="83.3" height="15.0" fill="rgb(208,128,22)" rx="2" ry="2" />
<text  x="651.59" y="319.5" >std::thre..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId (1 samples, 1.18%)</title><rect x="10.0" y="277" width="13.9" height="15.0" fill="rgb(221,118,46)" rx="2" ry="2" />
<text  x="13.00" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;PageId, (1 samples, 1.18%)</title><rect x="718.0" y="181" width="13.9" height="15.0" fill="rgb(207,108,34)" rx="2" ry="2" />
<text  x="721.00" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::stdio_sync_filebuf&lt;char,std::char_traits&lt;char&gt; (2 samples, 2.35%)</title><rect x="773.5" y="293" width="27.8" height="15.0" fill="rgb(218,176,0)" rx="2" ry="2" />
<text  x="776.53" y="303.5" >_..</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="204.4" y="261" width="13.8" height="15.0" fill="rgb(235,121,24)" rx="2" ry="2" />
<text  x="207.35" y="271.5" ></text>
</g>
<g >
<title>std::thread::_Invoker&lt;std::tuple&lt;void (6 samples, 7.06%)</title><rect x="648.6" y="293" width="83.3" height="15.0" fill="rgb(240,149,1)" rx="2" ry="2" />
<text  x="651.59" y="303.5" >std::thre..</text>
</g>
<g >
<title>std::__uninitialized_move_if_noexcept_a&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="261" width="13.9" height="15.0" fill="rgb(249,163,45)" rx="2" ry="2" />
<text  x="1179.12" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="426.5" y="245" width="13.9" height="15.0" fill="rgb(207,86,30)" rx="2" ry="2" />
<text  x="429.47" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="10.0" y="261" width="13.9" height="15.0" fill="rgb(250,39,20)" rx="2" ry="2" />
<text  x="13.00" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="121.1" y="261" width="13.8" height="15.0" fill="rgb(239,188,9)" rx="2" ry="2" />
<text  x="124.06" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Dirty (1 samples, 1.18%)</title><rect x="551.4" y="277" width="13.9" height="15.0" fill="rgb(246,90,12)" rx="2" ry="2" />
<text  x="554.41" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="357.1" y="245" width="13.8" height="15.0" fill="rgb(245,206,0)" rx="2" ry="2" />
<text  x="360.06" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04c450, (1 samples, 1.18%)</title><rect x="579.2" y="293" width="13.9" height="15.0" fill="rgb(224,81,41)" rx="2" ry="2" />
<text  x="582.18" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="509.8" y="245" width="13.8" height="15.0" fill="rgb(227,35,2)" rx="2" ry="2" />
<text  x="512.76" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda040db0, (1 samples, 1.18%)</title><rect x="315.4" y="293" width="13.9" height="15.0" fill="rgb(230,138,49)" rx="2" ry="2" />
<text  x="318.41" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03a630, (1 samples, 1.18%)</title><rect x="176.6" y="293" width="13.9" height="15.0" fill="rgb(237,55,52)" rx="2" ry="2" />
<text  x="179.59" y="303.5" ></text>
</g>
<g >
<title>std::condition_variable::wait&lt;MultiThreadedPageRankComputer::CyclicBarrier::await()::{lambda()#1}&gt;(std::unique_lock&lt;std::mutex&gt;&amp;,MultiThreadedPageRankComputer::CyclicBarrier::await()::{lambda()#1}) (2 samples, 2.35%)</title><rect x="662.5" y="197" width="27.7" height="15.0" fill="rgb(236,68,15)" rx="2" ry="2" />
<text  x="665.47" y="207.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="593.1" y="229" width="13.8" height="15.0" fill="rgb(249,83,33)" rx="2" ry="2" />
<text  x="596.06" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="190.5" y="261" width="13.9" height="15.0" fill="rgb(225,222,22)" rx="2" ry="2" />
<text  x="193.47" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="565.3" y="245" width="13.9" height="15.0" fill="rgb(240,70,53)" rx="2" ry="2" />
<text  x="568.29" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="204.4" y="277" width="13.8" height="15.0" fill="rgb(216,29,46)" rx="2" ry="2" />
<text  x="207.35" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;char&gt; (1 samples, 1.18%)</title><rect x="1162.2" y="117" width="13.9" height="15.0" fill="rgb(211,67,40)" rx="2" ry="2" />
<text  x="1165.24" y="127.5" ></text>
</g>
<g >
<title>std::char_traits&lt;char&gt;::copy(__n=64, (1 samples, 1.18%)</title><rect x="1148.4" y="53" width="13.8" height="15.0" fill="rgb(222,137,7)" rx="2" ry="2" />
<text  x="1151.35" y="63.5" ></text>
</g>
<g >
<title>__pthread_cond_wait (2 samples, 2.35%)</title><rect x="801.3" y="261" width="27.8" height="15.0" fill="rgb(205,59,5)" rx="2" ry="2" />
<text  x="804.29" y="271.5" >_..</text>
</g>
<g >
<title>std::unordered_map&lt;PageId, (3 samples, 3.53%)</title><rect x="690.2" y="213" width="41.7" height="15.0" fill="rgb(226,22,35)" rx="2" ry="2" />
<text  x="693.24" y="223.5" >std..</text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda043ab0, (1 samples, 1.18%)</title><rect x="370.9" y="293" width="13.9" height="15.0" fill="rgb(252,12,45)" rx="2" ry="2" />
<text  x="373.94" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;PageId, (3 samples, 3.53%)</title><rect x="690.2" y="197" width="41.7" height="15.0" fill="rgb(245,75,3)" rx="2" ry="2" />
<text  x="693.24" y="207.5" >std..</text>
</g>
<g >
<title>??() (52 samples, 61.18%)</title><rect x="10.0" y="325" width="721.9" height="15.0" fill="rgb(235,47,42)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >??()</text>
</g>
<g >
<title>__GI___libc_read(fd=0, (1 samples, 1.18%)</title><rect x="787.4" y="245" width="13.9" height="15.0" fill="rgb(208,61,10)" rx="2" ry="2" />
<text  x="790.41" y="255.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="537.5" y="261" width="13.9" height="15.0" fill="rgb(209,212,33)" rx="2" ry="2" />
<text  x="540.53" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="412.6" y="261" width="13.9" height="15.0" fill="rgb(247,228,10)" rx="2" ry="2" />
<text  x="415.59" y="271.5" ></text>
</g>
<g >
<title>std::_Construct&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="197" width="13.9" height="15.0" fill="rgb(254,60,44)" rx="2" ry="2" />
<text  x="1179.12" y="207.5" ></text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;)() (2 samples, 2.35%)</title><rect x="801.3" y="277" width="27.8" height="15.0" fill="rgb(241,13,40)" rx="2" ry="2" />
<text  x="804.29" y="287.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="69" width="13.8" height="15.0" fill="rgb(238,168,28)" rx="2" ry="2" />
<text  x="1151.35" y="79.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;char&gt;::deallocate(this=0x5557641a9e08, (1 samples, 1.18%)</title><rect x="1162.2" y="101" width="13.9" height="15.0" fill="rgb(207,120,27)" rx="2" ry="2" />
<text  x="1165.24" y="111.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="273.8" y="261" width="13.8" height="15.0" fill="rgb(240,88,1)" rx="2" ry="2" />
<text  x="276.76" y="271.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::generateIds (23 samples, 27.06%)</title><rect x="829.1" y="309" width="319.3" height="15.0" fill="rgb(230,51,6)" rx="2" ry="2" />
<text  x="832.06" y="319.5" >MultiThreadedPageRankComputer::generateIds</text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0392b0, (1 samples, 1.18%)</title><rect x="162.7" y="293" width="13.9" height="15.0" fill="rgb(237,6,35)" rx="2" ry="2" />
<text  x="165.71" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="398.7" y="261" width="13.9" height="15.0" fill="rgb(239,1,17)" rx="2" ry="2" />
<text  x="401.71" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Old (1 samples, 1.18%)</title><rect x="301.5" y="277" width="13.9" height="15.0" fill="rgb(250,49,50)" rx="2" ry="2" />
<text  x="304.53" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="176.6" y="261" width="13.9" height="15.0" fill="rgb(254,119,1)" rx="2" ry="2" />
<text  x="179.59" y="271.5" ></text>
</g>
<g >
<title>std::_Hash_impl::hash(__seed=3339675911, (1 samples, 1.18%)</title><rect x="718.0" y="133" width="13.9" height="15.0" fill="rgb(212,183,21)" rx="2" ry="2" />
<text  x="721.00" y="143.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="259.9" y="277" width="13.9" height="15.0" fill="rgb(238,169,17)" rx="2" ry="2" />
<text  x="262.88" y="287.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="23.9" y="245" width="13.9" height="15.0" fill="rgb(216,21,7)" rx="2" ry="2" />
<text  x="26.88" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="176.6" y="277" width="13.9" height="15.0" fill="rgb(250,120,48)" rx="2" ry="2" />
<text  x="179.59" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="287.6" y="245" width="13.9" height="15.0" fill="rgb(242,136,31)" rx="2" ry="2" />
<text  x="290.65" y="255.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="468.1" y="245" width="13.9" height="15.0" fill="rgb(223,226,52)" rx="2" ry="2" />
<text  x="471.12" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="370.9" y="245" width="13.9" height="15.0" fill="rgb(209,0,47)" rx="2" ry="2" />
<text  x="373.94" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda04b0d0, (1 samples, 1.18%)</title><rect x="551.4" y="293" width="13.9" height="15.0" fill="rgb(222,159,43)" rx="2" ry="2" />
<text  x="554.41" y="303.5" ></text>
</g>
<g >
<title>std::vector&lt;std::pair&lt;PageId, (1 samples, 1.18%)</title><rect x="1176.1" y="277" width="13.9" height="15.0" fill="rgb(251,19,44)" rx="2" ry="2" />
<text  x="1179.12" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda033850, (1 samples, 1.18%)</title><rect x="10.0" y="293" width="13.9" height="15.0" fill="rgb(216,120,20)" rx="2" ry="2" />
<text  x="13.00" y="303.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda038050, (1 samples, 1.18%)</title><rect x="134.9" y="293" width="13.9" height="15.0" fill="rgb(214,43,16)" rx="2" ry="2" />
<text  x="137.94" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.35%)</title><rect x="1148.4" y="277" width="27.7" height="15.0" fill="rgb(234,40,18)" rx="2" ry="2" />
<text  x="1151.35" y="287.5" >s..</text>
</g>
<g >
<title>MultiThreadedPageRankComputer::pageRankWorkFunc (5 samples, 5.88%)</title><rect x="662.5" y="229" width="69.4" height="15.0" fill="rgb(235,84,21)" rx="2" ry="2" />
<text  x="665.47" y="239.5" >MultiTh..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1148.4" y="229" width="13.8" height="15.0" fill="rgb(216,7,4)" rx="2" ry="2" />
<text  x="1151.35" y="239.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="148.8" y="277" width="13.9" height="15.0" fill="rgb(207,161,42)" rx="2" ry="2" />
<text  x="151.82" y="287.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="551.4" y="261" width="13.9" height="15.0" fill="rgb(251,225,27)" rx="2" ry="2" />
<text  x="554.41" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*, (23 samples, 27.06%)</title><rect x="829.1" y="277" width="319.3" height="15.0" fill="rgb(206,24,48)" rx="2" ry="2" />
<text  x="832.06" y="287.5" >std::_Destroy&lt;MultiThreadedPageRankComputer..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="593.1" y="213" width="13.8" height="15.0" fill="rgb(220,171,43)" rx="2" ry="2" />
<text  x="596.06" y="223.5" ></text>
</g>
<g >
<title>std::__invoke&lt;void (6 samples, 7.06%)</title><rect x="648.6" y="261" width="83.3" height="15.0" fill="rgb(206,79,35)" rx="2" ry="2" />
<text  x="651.59" y="271.5" >std::__in..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Small (1 samples, 1.18%)</title><rect x="606.9" y="277" width="13.9" height="15.0" fill="rgb(220,192,34)" rx="2" ry="2" />
<text  x="609.94" y="287.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_stringstream&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="325" width="13.8" height="15.0" fill="rgb(248,112,26)" rx="2" ry="2" />
<text  x="748.76" y="335.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="51.6" y="245" width="13.9" height="15.0" fill="rgb(252,206,27)" rx="2" ry="2" />
<text  x="54.65" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="232.1" y="261" width="13.9" height="15.0" fill="rgb(225,128,53)" rx="2" ry="2" />
<text  x="235.12" y="271.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Great (1 samples, 1.18%)</title><rect x="23.9" y="277" width="13.9" height="15.0" fill="rgb(219,37,39)" rx="2" ry="2" />
<text  x="26.88" y="287.5" ></text>
</g>
<g >
<title>futex_wait_cancelable (2 samples, 2.35%)</title><rect x="801.3" y="229" width="27.8" height="15.0" fill="rgb(233,154,32)" rx="2" ry="2" />
<text  x="804.29" y="239.5" >f..</text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="23.9" y="261" width="13.9" height="15.0" fill="rgb(251,70,30)" rx="2" ry="2" />
<text  x="26.88" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="148.8" y="261" width="13.9" height="15.0" fill="rgb(224,69,48)" rx="2" ry="2" />
<text  x="151.82" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1162.2" y="149" width="13.9" height="15.0" fill="rgb(253,123,51)" rx="2" ry="2" />
<text  x="1165.24" y="159.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="218.2" y="261" width="13.9" height="15.0" fill="rgb(207,79,22)" rx="2" ry="2" />
<text  x="221.24" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="37.8" y="261" width="13.8" height="15.0" fill="rgb(219,39,12)" rx="2" ry="2" />
<text  x="40.76" y="271.5" ></text>
</g>
<g >
<title>pageRankComputationWithNetwork(computer=..., (28 samples, 32.94%)</title><rect x="801.3" y="341" width="388.7" height="15.0" fill="rgb(229,224,14)" rx="2" ry="2" />
<text  x="804.29" y="351.5" >pageRankComputationWithNetwork(computer=...,</text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="482.0" y="245" width="13.9" height="15.0" fill="rgb(223,77,45)" rx="2" ry="2" />
<text  x="485.00" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="440.4" y="261" width="13.8" height="15.0" fill="rgb(237,115,49)" rx="2" ry="2" />
<text  x="443.35" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="745.8" y="245" width="13.8" height="15.0" fill="rgb(240,8,21)" rx="2" ry="2" />
<text  x="748.76" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Clueless (1 samples, 1.18%)</title><rect x="634.7" y="277" width="13.9" height="15.0" fill="rgb(215,220,54)" rx="2" ry="2" />
<text  x="637.71" y="287.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.18%)</title><rect x="1148.4" y="181" width="13.8" height="15.0" fill="rgb(253,102,12)" rx="2" ry="2" />
<text  x="1151.35" y="191.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId (1 samples, 1.18%)</title><rect x="593.1" y="277" width="13.8" height="15.0" fill="rgb(218,97,18)" rx="2" ry="2" />
<text  x="596.06" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="412.6" y="277" width="13.9" height="15.0" fill="rgb(211,111,40)" rx="2" ry="2" />
<text  x="415.59" y="287.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda03fa30, (1 samples, 1.18%)</title><rect x="301.5" y="293" width="13.9" height="15.0" fill="rgb(214,69,54)" rx="2" ry="2" />
<text  x="304.53" y="303.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="370.9" y="277" width="13.9" height="15.0" fill="rgb(235,135,20)" rx="2" ry="2" />
<text  x="373.94" y="287.5" ></text>
</g>
<g >
<title>PageIdHash::operator() (1 samples, 1.18%)</title><rect x="718.0" y="165" width="13.9" height="15.0" fill="rgb(230,83,16)" rx="2" ry="2" />
<text  x="721.00" y="175.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="426.5" y="277" width="13.9" height="15.0" fill="rgb(209,100,18)" rx="2" ry="2" />
<text  x="429.47" y="287.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 1.18%)</title><rect x="745.8" y="165" width="13.8" height="15.0" fill="rgb(211,30,0)" rx="2" ry="2" />
<text  x="748.76" y="175.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="134.9" y="245" width="13.9" height="15.0" fill="rgb(253,194,18)" rx="2" ry="2" />
<text  x="137.94" y="255.5" ></text>
</g>
<g >
<title>PageId::PageId (1 samples, 1.18%)</title><rect x="1176.1" y="165" width="13.9" height="15.0" fill="rgb(226,99,34)" rx="2" ry="2" />
<text  x="1179.12" y="175.5" ></text>
</g>
<g >
<title>std::_Destroy&lt;MultiThreadedPageRankComputer::ThreadRAII&gt; (23 samples, 27.06%)</title><rect x="829.1" y="229" width="319.3" height="15.0" fill="rgb(248,157,10)" rx="2" ry="2" />
<text  x="832.06" y="239.5" >std::_Destroy&lt;MultiThreadedPageRankComputer..</text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="579.2" y="261" width="13.9" height="15.0" fill="rgb(223,229,31)" rx="2" ry="2" />
<text  x="582.18" y="271.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="620.8" y="245" width="13.9" height="15.0" fill="rgb(232,58,9)" rx="2" ry="2" />
<text  x="623.82" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="620.8" y="277" width="13.9" height="15.0" fill="rgb(238,50,28)" rx="2" ry="2" />
<text  x="623.82" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1148.4" y="245" width="13.8" height="15.0" fill="rgb(237,67,22)" rx="2" ry="2" />
<text  x="1151.35" y="255.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="162.7" y="245" width="13.9" height="15.0" fill="rgb(211,17,11)" rx="2" ry="2" />
<text  x="165.71" y="255.5" ></text>
</g>
<g >
<title>__GI__IO_default_uflow(fp=0x7f6dd9ce7a00 (1 samples, 1.18%)</title><rect x="787.4" y="277" width="13.9" height="15.0" fill="rgb(215,155,52)" rx="2" ry="2" />
<text  x="790.41" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Huge (1 samples, 1.18%)</title><rect x="495.9" y="277" width="13.9" height="15.0" fill="rgb(246,147,29)" rx="2" ry="2" />
<text  x="498.88" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="259.9" y="245" width="13.9" height="15.0" fill="rgb(240,110,51)" rx="2" ry="2" />
<text  x="262.88" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Huge (1 samples, 1.18%)</title><rect x="440.4" y="277" width="13.8" height="15.0" fill="rgb(232,16,47)" rx="2" ry="2" />
<text  x="443.35" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="315.4" y="245" width="13.9" height="15.0" fill="rgb(249,10,30)" rx="2" ry="2" />
<text  x="318.41" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (1 samples, 1.18%)</title><rect x="1148.4" y="37" width="13.8" height="15.0" fill="rgb(222,197,33)" rx="2" ry="2" />
<text  x="1151.35" y="47.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1162.2" y="229" width="13.9" height="15.0" fill="rgb(252,81,39)" rx="2" ry="2" />
<text  x="1165.24" y="239.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="454.2" y="245" width="13.9" height="15.0" fill="rgb(228,152,26)" rx="2" ry="2" />
<text  x="457.24" y="255.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="79.4" y="245" width="13.9" height="15.0" fill="rgb(224,44,3)" rx="2" ry="2" />
<text  x="82.41" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="51.6" y="261" width="13.9" height="15.0" fill="rgb(208,7,3)" rx="2" ry="2" />
<text  x="54.65" y="271.5" ></text>
</g>
<g >
<title>std::_Destroy_aux&lt;false&gt;::__destroy&lt;MultiThreadedPageRankComputer::ThreadRAII*&gt; (23 samples, 27.06%)</title><rect x="829.1" y="245" width="319.3" height="15.0" fill="rgb(213,52,43)" rx="2" ry="2" />
<text  x="832.06" y="255.5" >std::_Destroy_aux&lt;false&gt;::__destroy&lt;MultiTh..</text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;Dirty (1 samples, 1.18%)</title><rect x="218.2" y="277" width="13.9" height="15.0" fill="rgb(224,221,52)" rx="2" ry="2" />
<text  x="221.24" y="287.5" ></text>
</g>
<g >
<title>MultiThreadedPageRankComputer::CyclicBarrier::await (2 samples, 2.35%)</title><rect x="662.5" y="213" width="27.7" height="15.0" fill="rgb(235,172,5)" rx="2" ry="2" />
<text  x="665.47" y="223.5" >M..</text>
</g>
<g >
<title>std::condition_variable::wait(std::unique_lock&lt;std::mutex&gt;&amp;)() (2 samples, 2.35%)</title><rect x="662.5" y="181" width="27.7" height="15.0" fill="rgb(214,156,49)" rx="2" ry="2" />
<text  x="665.47" y="191.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;PageId, (2 samples, 2.35%)</title><rect x="1148.4" y="261" width="27.7" height="15.0" fill="rgb(234,126,28)" rx="2" ry="2" />
<text  x="1151.35" y="271.5" >s..</text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1176.1" y="149" width="13.9" height="15.0" fill="rgb(208,53,14)" rx="2" ry="2" />
<text  x="1179.12" y="159.5" ></text>
</g>
<g >
<title>start_thread(arg=&lt;optimized (52 samples, 61.18%)</title><rect x="10.0" y="341" width="721.9" height="15.0" fill="rgb(240,200,53)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >start_thread(arg=&lt;optimized</text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize(this=this@entry=0x7ffc52a36740, (1 samples, 1.18%)</title><rect x="731.9" y="341" width="13.9" height="15.0" fill="rgb(231,162,53)" rx="2" ry="2" />
<text  x="734.88" y="351.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="101" width="13.8" height="15.0" fill="rgb(210,34,46)" rx="2" ry="2" />
<text  x="1151.35" y="111.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="65.5" y="245" width="13.9" height="15.0" fill="rgb(227,44,2)" rx="2" ry="2" />
<text  x="68.53" y="255.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda0464b0, (1 samples, 1.18%)</title><rect x="426.5" y="293" width="13.9" height="15.0" fill="rgb(233,226,7)" rx="2" ry="2" />
<text  x="429.47" y="303.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=&quot;New (1 samples, 1.18%)</title><rect x="468.1" y="277" width="13.9" height="15.0" fill="rgb(241,113,33)" rx="2" ry="2" />
<text  x="471.12" y="287.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="93.3" y="261" width="13.9" height="15.0" fill="rgb(245,84,52)" rx="2" ry="2" />
<text  x="96.29" y="271.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="329.3" y="245" width="13.9" height="15.0" fill="rgb(207,88,49)" rx="2" ry="2" />
<text  x="332.29" y="255.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="343.2" y="245" width="13.9" height="15.0" fill="rgb(245,47,17)" rx="2" ry="2" />
<text  x="346.18" y="255.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="301.5" y="261" width="13.9" height="15.0" fill="rgb(212,205,50)" rx="2" ry="2" />
<text  x="304.53" y="271.5" ></text>
</g>
<g >
<title>Page::generateId(this=0x7f6dda036df0, (1 samples, 1.18%)</title><rect x="93.3" y="293" width="13.9" height="15.0" fill="rgb(221,27,7)" rx="2" ry="2" />
<text  x="96.29" y="303.5" ></text>
</g>
<g >
<title>__libc_read (1 samples, 1.18%)</title><rect x="384.8" y="261" width="13.9" height="15.0" fill="rgb(223,228,48)" rx="2" ry="2" />
<text  x="387.82" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="593.1" y="261" width="13.8" height="15.0" fill="rgb(229,81,43)" rx="2" ry="2" />
<text  x="596.06" y="271.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="551.4" y="245" width="13.9" height="15.0" fill="rgb(250,121,8)" rx="2" ry="2" />
<text  x="554.41" y="255.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="398.7" y="277" width="13.9" height="15.0" fill="rgb(210,37,19)" rx="2" ry="2" />
<text  x="401.71" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="121.1" y="277" width="13.8" height="15.0" fill="rgb(245,199,40)" rx="2" ry="2" />
<text  x="124.06" y="287.5" ></text>
</g>
<g >
<title>Sha256IdGenerator::generateId(content=..., (1 samples, 1.18%)</title><rect x="357.1" y="277" width="13.8" height="15.0" fill="rgb(213,59,52)" rx="2" ry="2" />
<text  x="360.06" y="287.5" ></text>
</g>
<g >
<title>arch_fork (1 samples, 1.18%)</title><rect x="523.6" y="245" width="13.9" height="15.0" fill="rgb(248,192,17)" rx="2" ry="2" />
<text  x="526.65" y="255.5" ></text>
</g>
<g >
<title>StdinGenerator::generateNetworkOfSize (4 samples, 4.71%)</title><rect x="745.8" y="341" width="55.5" height="15.0" fill="rgb(223,217,26)" rx="2" ry="2" />
<text  x="748.76" y="351.5" >Stdin..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;PageId (1 samples, 1.18%)</title><rect x="1162.2" y="213" width="13.9" height="15.0" fill="rgb(216,1,28)" rx="2" ry="2" />
<text  x="1165.24" y="223.5" ></text>
</g>
<g >
<title>__libc_fork (1 samples, 1.18%)</title><rect x="523.6" y="261" width="13.9" height="15.0" fill="rgb(235,143,33)" rx="2" ry="2" />
<text  x="526.65" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, (1 samples, 1.18%)</title><rect x="1148.4" y="117" width="13.8" height="15.0" fill="rgb(246,53,29)" rx="2" ry="2" />
<text  x="1151.35" y="127.5" ></text>
</g>
<g >
<title>all (85 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(248,74,21)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>std::basic_istream&lt;char,std::char_traits&lt;char&gt; (3 samples, 3.53%)</title><rect x="759.6" y="309" width="41.7" height="15.0" fill="rgb(226,169,29)" rx="2" ry="2" />
<text  x="762.65" y="319.5" >std..</text>
</g>
</g>
</svg>
